##################################################
# file: ProcessingService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\Python26\Scripts\wsdl2py -b http://poligon.machinelearning.ru/processingservice.asmx?WSDL
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://poligon.machinelearning.ru/
##############################

class ns0:
    targetNamespace = "http://poligon.machinelearning.ru/"

    class ProcessingTask_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ProcessingTask")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProcessingTask_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"PocketId"), aname="_PocketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfArrayOfInt",lazy=False)(pname=(ns,"LearnIndexes"), aname="_LearnIndexes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfArrayOfInt",lazy=False)(pname=(ns,"TestIndexes"), aname="_TestIndexes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AlgSynonim"), aname="_AlgSynonim", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfString",lazy=False)(pname=(ns,"AlgParamNames"), aname="_AlgParamNames", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfString",lazy=False)(pname=(ns,"AlgParamValues"), aname="_AlgParamValues", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfBoolean",lazy=False)(pname=(ns,"AlgParamUsages"), aname="_AlgParamUsages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProblemSynonim"), aname="_ProblemSynonim", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ProcessingState",lazy=False)(pname=(ns,"ProcessingState"), aname="_ProcessingState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PocketId = None
                    self._LearnIndexes = None
                    self._TestIndexes = None
                    self._AlgSynonim = None
                    self._AlgParamNames = None
                    self._AlgParamValues = None
                    self._AlgParamUsages = None
                    self._ProblemSynonim = None
                    self._ProcessingState = None
                    return
            Holder.__name__ = "ProcessingTask_Holder"
            self.pyclass = Holder

    class ArrayOfArrayOfInt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfArrayOfInt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfArrayOfInt_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","ArrayOfInt",lazy=False)(pname=(ns,"ArrayOfInt"), aname="_ArrayOfInt", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ArrayOfInt = []
                    return
            Holder.__name__ = "ArrayOfArrayOfInt_Holder"
            self.pyclass = Holder

    class ArrayOfInt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfInt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfInt_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"int"), aname="_int", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._int = []
                    return
            Holder.__name__ = "ArrayOfInt_Holder"
            self.pyclass = Holder

    class ArrayOfString_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "ArrayOfString_Holder"
            self.pyclass = Holder

    class ArrayOfBoolean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfBoolean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfBoolean_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"boolean"), aname="_boolean", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._boolean = []
                    return
            Holder.__name__ = "ArrayOfBoolean_Holder"
            self.pyclass = Holder

    class ProcessingState_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ProcessingState")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProcessingState_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","StatusType",lazy=False)(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Message"), aname="_Message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Status = None
                    self._Message = None
                    return
            Holder.__name__ = "ProcessingState_Holder"
            self.pyclass = Holder

    class StatusType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "StatusType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProblemData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ProblemData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProblemData_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","ArrayOfPropertyDescription",lazy=False)(pname=(ns,"PropertiesDescription"), aname="_PropertiesDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfArrayOfDouble",lazy=False)(pname=(ns,"DataMatrix"), aname="_DataMatrix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfArrayOfDouble",lazy=False)(pname=(ns,"LossMatrix"), aname="_LossMatrix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfDouble",lazy=False)(pname=(ns,"Weights"), aname="_Weights", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfInt",lazy=False)(pname=(ns,"Target"), aname="_Target", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ProcessingState",lazy=False)(pname=(ns,"ProcessingState"), aname="_ProcessingState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PropertiesDescription = None
                    self._DataMatrix = None
                    self._LossMatrix = None
                    self._Weights = None
                    self._Target = None
                    self._ProcessingState = None
                    return
            Holder.__name__ = "ProblemData_Holder"
            self.pyclass = Holder

    class ArrayOfPropertyDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfPropertyDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfPropertyDescription_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","PropertyDescription",lazy=False)(pname=(ns,"PropertyDescription"), aname="_PropertyDescription", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PropertyDescription = []
                    return
            Holder.__name__ = "ArrayOfPropertyDescription_Holder"
            self.pyclass = Holder

    class PropertyDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "PropertyDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PropertyDescription_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","PropertyType",lazy=False)(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfInt",lazy=False)(pname=(ns,"Values"), aname="_Values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Type = None
                    self._Values = None
                    return
            Holder.__name__ = "PropertyDescription_Holder"
            self.pyclass = Holder

    class PropertyType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "PropertyType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfArrayOfDouble_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfArrayOfDouble")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfArrayOfDouble_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","ArrayOfDouble",lazy=False)(pname=(ns,"ArrayOfDouble"), aname="_ArrayOfDouble", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ArrayOfDouble = []
                    return
            Holder.__name__ = "ArrayOfArrayOfDouble_Holder"
            self.pyclass = Holder

    class ArrayOfDouble_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfDouble")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfDouble_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"double"), aname="_double", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._double = []
                    return
            Holder.__name__ = "ArrayOfDouble_Holder"
            self.pyclass = Holder

    class ArrayOfTestResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "ArrayOfTestResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfTestResult_Def.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","TestResult",lazy=False)(pname=(ns,"TestResult"), aname="_TestResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TestResult = []
                    return
            Holder.__name__ = "ArrayOfTestResult_Holder"
            self.pyclass = Holder

    class TestResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://poligon.machinelearning.ru/"
        type = (schema, "TestResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TestResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Index"), aname="_Index", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfInt",lazy=False)(pname=(ns,"Answers"), aname="_Answers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfDouble",lazy=False)(pname=(ns,"PropertiesWeights"), aname="_PropertiesWeights", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfDouble",lazy=False)(pname=(ns,"ObjectsWeights"), aname="_ObjectsWeights", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfArrayOfDouble",lazy=False)(pname=(ns,"ProbabilityMatrix"), aname="_ProbabilityMatrix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Error"), aname="_Error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorException"), aname="_ErrorException", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Index = None
                    self._Answers = None
                    self._PropertiesWeights = None
                    self._ObjectsWeights = None
                    self._ProbabilityMatrix = None
                    self._Error = None
                    self._ErrorException = None
                    return
            Holder.__name__ = "TestResult_Holder"
            self.pyclass = Holder

    class GetTask_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTask"
        schema = "http://poligon.machinelearning.ru/"
        def __init__(self, **kw):
            ns = ns0.GetTask_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"algSynonim"), aname="_algSynonim", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://poligon.machinelearning.ru/","GetTask")
            kw["aname"] = "_GetTask"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._algSynonim = None
                    self._password = None
                    return
            Holder.__name__ = "GetTask_Holder"
            self.pyclass = Holder

    class GetTaskResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTaskResponse"
        schema = "http://poligon.machinelearning.ru/"
        def __init__(self, **kw):
            ns = ns0.GetTaskResponse_Dec.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","ProcessingTask",lazy=False)(pname=(ns,"GetTaskResult"), aname="_GetTaskResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://poligon.machinelearning.ru/","GetTaskResponse")
            kw["aname"] = "_GetTaskResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetTaskResult = None
                    return
            Holder.__name__ = "GetTaskResponse_Holder"
            self.pyclass = Holder

    class GetProblem_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetProblem"
        schema = "http://poligon.machinelearning.ru/"
        def __init__(self, **kw):
            ns = ns0.GetProblem_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"algSynonim"), aname="_algSynonim", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"problemSynonim"), aname="_problemSynonim", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://poligon.machinelearning.ru/","GetProblem")
            kw["aname"] = "_GetProblem"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._algSynonim = None
                    self._password = None
                    self._problemSynonim = None
                    return
            Holder.__name__ = "GetProblem_Holder"
            self.pyclass = Holder

    class GetProblemResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetProblemResponse"
        schema = "http://poligon.machinelearning.ru/"
        def __init__(self, **kw):
            ns = ns0.GetProblemResponse_Dec.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","ProblemData",lazy=False)(pname=(ns,"GetProblemResult"), aname="_GetProblemResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://poligon.machinelearning.ru/","GetProblemResponse")
            kw["aname"] = "_GetProblemResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetProblemResult = None
                    return
            Holder.__name__ = "GetProblemResponse_Holder"
            self.pyclass = Holder

    class RegisterResult_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RegisterResult"
        schema = "http://poligon.machinelearning.ru/"
        def __init__(self, **kw):
            ns = ns0.RegisterResult_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"algSynonim"), aname="_algSynonim", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"pocketKey"), aname="_pocketKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfTestResult",lazy=False)(pname=(ns,"learnResults"), aname="_learnResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://poligon.machinelearning.ru/","ArrayOfTestResult",lazy=False)(pname=(ns,"testResults"), aname="_testResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://poligon.machinelearning.ru/","RegisterResult")
            kw["aname"] = "_RegisterResult"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._algSynonim = None
                    self._password = None
                    self._pocketKey = None
                    self._learnResults = None
                    self._testResults = None
                    return
            Holder.__name__ = "RegisterResult_Holder"
            self.pyclass = Holder

    class RegisterResultResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RegisterResultResponse"
        schema = "http://poligon.machinelearning.ru/"
        def __init__(self, **kw):
            ns = ns0.RegisterResultResponse_Dec.schema
            TClist = [GTD("http://poligon.machinelearning.ru/","ProcessingState",lazy=False)(pname=(ns,"RegisterResultResult"), aname="_RegisterResultResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://poligon.machinelearning.ru/","RegisterResultResponse")
            kw["aname"] = "_RegisterResultResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RegisterResultResult = None
                    return
            Holder.__name__ = "RegisterResultResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://poligon.machinelearning.ru/)
